// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	repository "github.com/Shofyan/StokbitInterview/repository/movie"
	gomock "github.com/golang/mock/gomock"
)

// MockISvcMovie is a mock of ISvcMovie interface.
type MockISvcMovie struct {
	ctrl     *gomock.Controller
	recorder *MockISvcMovieMockRecorder
}

// MockISvcMovieMockRecorder is the mock recorder for MockISvcMovie.
type MockISvcMovieMockRecorder struct {
	mock *MockISvcMovie
}

// NewMockISvcMovie creates a new mock instance.
func NewMockISvcMovie(ctrl *gomock.Controller) *MockISvcMovie {
	mock := &MockISvcMovie{ctrl: ctrl}
	mock.recorder = &MockISvcMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISvcMovie) EXPECT() *MockISvcMovieMockRecorder {
	return m.recorder
}

// GetOneMovie mocks base method.
func (m *MockISvcMovie) GetOneMovie(imdbID string) (repository.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneMovie", imdbID)
	ret0, _ := ret[0].(repository.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneMovie indicates an expected call of GetOneMovie.
func (mr *MockISvcMovieMockRecorder) GetOneMovie(imdbID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneMovie", reflect.TypeOf((*MockISvcMovie)(nil).GetOneMovie), imdbID)
}

// SearchMovie mocks base method.
func (m *MockISvcMovie) SearchMovie(key, page string) (repository.SeachMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovie", key, page)
	ret0, _ := ret[0].(repository.SeachMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockISvcMovieMockRecorder) SearchMovie(key, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockISvcMovie)(nil).SearchMovie), key, page)
}
